package com.alphaware.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.service.annotation.GetExchange;

import com.alphaware.entities.Employee;
import com.alphaware.exceptions.RecordAlreadyExistException;
import com.alphaware.exceptions.RecordNotFoundException;
import com.alphaware.iservices.IEmployeeService;

import io.swagger.v3.oas.annotations.Operation;

@RestController
@RequestMapping("/employee")
public class EmployeeController {

	@Autowired
	private IEmployeeService employeeService;

	@PostMapping("/")
	@Operation(description = "save employee")
	public ResponseEntity<Employee> addEmployee(@RequestBody Employee employee) throws RecordAlreadyExistException{
		return new ResponseEntity<>(employeeService.addEmployee(employee), HttpStatus.CREATED);
	}
	
	@GetMapping("/{id}")
	@Operation(description = "get employee by id")
	public ResponseEntity<Employee> get(@PathVariable String id) throws RecordNotFoundException {
		return new ResponseEntity<>(employeeService.get(id), HttpStatus.OK);
	}
	
	@GetMapping("/")
	@Operation(description = "get all employees")
	public ResponseEntity<List<Employee>> getAll() {
		return new ResponseEntity<>(employeeService.get(), HttpStatus.OK);
	}
	
	@PutMapping("/{id}")
	@Operation(description = "update employee by employeeId")
	public ResponseEntity<Employee> update(@PathVariable String id, @RequestBody Employee employee)
			throws RecordNotFoundException {
		return new ResponseEntity<>(employeeService.update(id, employee), HttpStatus.OK);
	}

	@DeleteMapping("/{id}")
	@Operation(description = "delete employee by employeeId")
	public ResponseEntity<String> delete(@PathVariable String id) throws RecordNotFoundException {
		return new ResponseEntity<>(employeeService.delete(id), HttpStatus.OK);
	}
}
